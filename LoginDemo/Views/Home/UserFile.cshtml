@model IEnumerable<LoginDemo.Models.EFModels.Users>

@{
    ViewData["Title"] = "UserFile";
}

<h1>待審核會員資料</h1>
<div>
    <form method="get">
        <div class="d-flex align-items-center">
            <label>關鍵字</label>
            <input class="form-control" type="text" name="txtKeyword" />
            <input class="btn btn-dark" type="submit" value="查詢" />
        </div>
    </form>
</div>
<form method="post"enctype="multipart/form-data">
    
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Birthday)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Password)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Acount)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@{

            
foreach (var item in Model) 
{
            <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
                <input type="hidden" name="Id" value="@item.Id" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem =>@item.Birthday)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Password)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Acount)
            </td>
            <td>
                <input type="submit" fun="update" sid="@item.Id" value="審核" class="btn btn-primary" />
            </td>
        </tr>
}}
    <input name="Id" id="hd" type="hidden" value="" />
    </tbody>
</table>
</form>

<nav aria-label="Page navigation example" class="mx-auto mt-4 d-inline">
    <ul class="pagination d-flex mt-3" style="padding-left:40%">
        <li class="page-item pages">
            <a class="page-link" href="#" aria-label="Previous" onclick="PagePrevious()">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item pageitems" onclick="PageTo(1)"><a class="page-link" href="#">1</a></li>
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Next" onclick="PageNext()">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>


 @section Scripts
    {
    <script>
        $('input[fun="update"]').click(function(){
            $('#hd').val($(this).attr('sid'));
        });

        //分頁相關
        let paginationIndex = 0 //不能調整
        let arrLenght = 0 //必要!!!要給予原本拿到的資料的陣列長度
        let range = 2 //必要!!!依照需求直接在頁面指定，不然就是預設顯示10筆資料
        let pagination = []
        //把完整版陣列丟進去，會生成相對應頁數的控制器
        //每次按按鈕都會執行一次Load
        function PageItem(arr) {
            let re = ""
            for (let i = 0; i < Math.ceil(arr.length / range); i++) {
                if(i == ((paginationIndex+range)/range)-1){
                    re += `<li class="page-item pageitems active" onclick="PageTo(${i + 1})"><a class="page-link" href="#">${i + 1}</a></li>`
                }
                else{
                    re += `<li class="page-item pageitems" onclick="PageTo(${i + 1})"><a class="page-link" href="#">${i + 1}</a></li>`
                }
            }
            $("ul .pageitems").remove()
            $("ul .pages").after(re)
        }
        //去指定頁
        function PageTo(page) {
            paginationIndex = (page * range) - range
            console.log(paginationIndex)
            load()
        }
        //上一頁
        function PagePrevious() {
            
            if ((paginationIndex - range) >= 0) {
                paginationIndex = paginationIndex - range
                load()
            }
        }
        //下一頁
        function PageNext() {
            console.log(paginationIndex + range)
            console.log(arrLenght - 1)
            if ((paginationIndex + range) < (arrLenght - 1)) {
                paginationIndex = paginationIndex + range
                load()
            }
        }
        //擷取陣列內容，把完整版的陣列丟進去
        function Pagination(list) {
            const re = list.slice(paginationIndex, paginationIndex + range)
            return re
        }
    </script>
}